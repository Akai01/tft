% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hardhat.R
\name{tft_fit}
\alias{tft_fit}
\alias{tft_fit.default}
\alias{tft_fit.recipe}
\title{Temporal Fusion Transformer model}
\usage{
tft_fit(x, ...)

\method{tft_fit}{default}(x, ...)

\method{tft_fit}{recipe}(x, df, tft_model = NULL, ..., from_epoch = NULL)
}
\arguments{
\item{x}{A \strong{recipe} specifying a set of preprocessing steps
created from \code{\link[recipes:recipe]{recipes::recipe()}}.

The predictor data should be standardized (e.g. centered or scaled).
The model treats categorical predictors internally thus, you don't need to
make any treatment.}

\item{...}{Model hyperparameters. See \code{\link[=tft_config]{tft_config()}} for a list of
all possible hyperparameters.}

\item{tft_model}{A previously fitted TFT model object to continue the fitting on.
if \code{NULL} (the default) a brand new model is initialized.}

\item{from_epoch}{When a \code{tft_model} is provided, restore the network weights from a specific epoch.
Default is last available checkpoint for restored model, or last epoch for in-memory model.}

\item{data}{A \strong{data frame} containing both the predictors and the outcome.}
}
\value{
A TFT model object. It can be used for serialization, predictions, or further fitting.
}
\description{
Fits the \href{https://arxiv.org/abs/1908.07442}{Temporal Fusion Transformer for Interpretable Multi-horizon Time Series Forecasting} model
}
\section{Fitting a pre-trained model}{


When providing a parent \code{tft_model} parameter, the model fitting resumes from that model weights
at the following epoch:
\itemize{
\item last fitted epoch for a model already in torch context
\item Last model checkpoint epoch for a model loaded from file
\item the epoch related to a checkpoint matching or preceding the \code{from_epoch} value if provided
The model fitting metrics append on top of the parent metrics in the returned TFT model.
}
}

\section{Threading}{


TFT uses \code{torch} as its backend for computation and \code{torch} uses all
available threads by default.

You can control the number of threads used by \code{torch} with:\preformatted{torch::torch_set_num_threads(1)
torch::torch_set_num_interop_threads(1)
}
}

\examples{
if (torch::torch_is_installed()) {
data("ames", package = "modeldata")
fit <- tft_fit(Sale_Price ~ ., data = ames, epochs = 1)
}

}
